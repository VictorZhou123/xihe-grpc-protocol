// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: competition.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Competition_SetSubmissionInfo_FullMethodName = "/competition.Competition/SetSubmissionInfo"
	Competition_GetTeamMembers_FullMethodName    = "/competition.Competition/GetTeamMembers"
)

// CompetitionClient is the client API for Competition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompetitionClient interface {
	SetSubmissionInfo(ctx context.Context, in *SubmissionInfo, opts ...grpc.CallOption) (*SubmissionResult, error)
	GetTeamMembers(ctx context.Context, in *TeamMembersRequest, opts ...grpc.CallOption) (*TeamMembersResponse, error)
}

type competitionClient struct {
	cc grpc.ClientConnInterface
}

func NewCompetitionClient(cc grpc.ClientConnInterface) CompetitionClient {
	return &competitionClient{cc}
}

func (c *competitionClient) SetSubmissionInfo(ctx context.Context, in *SubmissionInfo, opts ...grpc.CallOption) (*SubmissionResult, error) {
	out := new(SubmissionResult)
	err := c.cc.Invoke(ctx, Competition_SetSubmissionInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitionClient) GetTeamMembers(ctx context.Context, in *TeamMembersRequest, opts ...grpc.CallOption) (*TeamMembersResponse, error) {
	out := new(TeamMembersResponse)
	err := c.cc.Invoke(ctx, Competition_GetTeamMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompetitionServer is the server API for Competition service.
// All implementations must embed UnimplementedCompetitionServer
// for forward compatibility
type CompetitionServer interface {
	SetSubmissionInfo(context.Context, *SubmissionInfo) (*SubmissionResult, error)
	GetTeamMembers(context.Context, *TeamMembersRequest) (*TeamMembersResponse, error)
	mustEmbedUnimplementedCompetitionServer()
}

// UnimplementedCompetitionServer must be embedded to have forward compatible implementations.
type UnimplementedCompetitionServer struct {
}

func (UnimplementedCompetitionServer) SetSubmissionInfo(context.Context, *SubmissionInfo) (*SubmissionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSubmissionInfo not implemented")
}
func (UnimplementedCompetitionServer) GetTeamMembers(context.Context, *TeamMembersRequest) (*TeamMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamMembers not implemented")
}
func (UnimplementedCompetitionServer) mustEmbedUnimplementedCompetitionServer() {}

// UnsafeCompetitionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompetitionServer will
// result in compilation errors.
type UnsafeCompetitionServer interface {
	mustEmbedUnimplementedCompetitionServer()
}

func RegisterCompetitionServer(s grpc.ServiceRegistrar, srv CompetitionServer) {
	s.RegisterService(&Competition_ServiceDesc, srv)
}

func _Competition_SetSubmissionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmissionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitionServer).SetSubmissionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Competition_SetSubmissionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitionServer).SetSubmissionInfo(ctx, req.(*SubmissionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Competition_GetTeamMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitionServer).GetTeamMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Competition_GetTeamMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitionServer).GetTeamMembers(ctx, req.(*TeamMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Competition_ServiceDesc is the grpc.ServiceDesc for Competition service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Competition_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "competition.Competition",
	HandlerType: (*CompetitionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetSubmissionInfo",
			Handler:    _Competition_SetSubmissionInfo_Handler,
		},
		{
			MethodName: "GetTeamMembers",
			Handler:    _Competition_GetTeamMembers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "competition.proto",
}
